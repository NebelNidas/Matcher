package matcher.ir.api.instance;

import java.util.List;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import matcher.ir.api.env.ClassEnv;
import matcher.ir.api.env.PhantomCapableClassEnv;
import matcher.ir.api.identity.Identity;
import matcher.ir.api.instance.info.NameInfo;

public sealed interface Instance permits ClassInstance, MemberInstance, MethodVarInstance {
	/**
	 * @return A string which uniquely identifies this instance within the originating ClassEnv.
	 * Identical copies of this instance across different ClassEnvs should have identical IDs.
	 */
	@NotNull
	String getId();

	/**
	 * @return The {@link ClassEnv} where this instance was originally constructed at at index 0,
	 * and all potential other {@link ClassEnv}s it was passed through at increasing indices.
	 */
	@NotNull
	List<? extends ClassEnv<?, ?, ?, ?, ?>> getClassEnvs();

	/**
	 * @return Whether or not this class was auto-generated by a {@link PhantomCapableClassEnv}.
	 */
	boolean isPhantom();

	@Nullable
	NameInfo getNameInfo();

	@Nullable
	Instance getOwner();

	@NotNull
	Identity getIdentity();

	interface InstanceBuilder<I extends Instance> {
		void setClassEnvs(@NotNull ClassEnv<?, ?, ?, ?, ?>... classEnvs);
		void setPhantom(boolean phantom);
		void setName(String name);
		void setOwner(Instance owner);
		I build();
	}
}
