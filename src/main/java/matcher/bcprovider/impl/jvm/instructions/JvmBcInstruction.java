package matcher.bcprovider.impl.jvm.instructions;

import org.objectweb.asm.Opcodes;
import org.objectweb.asm.tree.AbstractInsnNode;

import matcher.bcprovider.BcInstruction;
import matcher.bcprovider.BcOpcode;
import matcher.bcprovider.SharedBcInstructions;
import matcher.bcprovider.SharedBcOpcodes;

public abstract class JvmBcInstruction implements BcInstruction {
	JvmBcInstruction(AbstractInsnNode asmNode) {
		this.asmNode = asmNode;
	}

	@Override
	public BcOpcode getOpcode() {
		switch (asmNode.getOpcode()) {
		case -1:
			// TODO
			return null;
		case Opcodes.ACONST_NULL:
			return SharedBcOpcodes.ACONST_NULL;
		case Opcodes.NOP:
			return SharedBcOpcodes.NOP;
		case Opcodes.ICONST_M1:
			return SharedBcOpcodes.ICONST_M1;
		case Opcodes.ICONST_0:
			return SharedBcOpcodes.ICONST_0;
		case Opcodes.ICONST_1:
			return SharedBcOpcodes.ICONST_1;
		case Opcodes.ICONST_2:
			return SharedBcOpcodes.ICONST_2;
		case Opcodes.ICONST_3:
			return SharedBcOpcodes.ICONST_3;
		case Opcodes.ICONST_4:
			return SharedBcOpcodes.ICONST_4;
		case Opcodes.ICONST_5:
			return SharedBcOpcodes.ICONST_5;
		case Opcodes.LCONST_0:
			return SharedBcOpcodes.LCONST_0;
		case Opcodes.LCONST_1:
			return SharedBcOpcodes.LCONST_1;
		case Opcodes.FCONST_0:
			return SharedBcOpcodes.FCONST_0;
		case Opcodes.FCONST_1:
			return SharedBcOpcodes.FCONST_1;
		case Opcodes.FCONST_2:
			return SharedBcOpcodes.FCONST_2;
		case Opcodes.DCONST_0:
			return SharedBcOpcodes.DCONST_0;
		case Opcodes.DCONST_1:
			return SharedBcOpcodes.DCONST_1;
		case Opcodes.BIPUSH:
			return SharedBcOpcodes.BIPUSH;
		case Opcodes.SIPUSH:
			return SharedBcOpcodes.SIPUSH;
		case Opcodes.LDC:
			return SharedBcOpcodes.LDC;
		case 19:
			return SharedBcOpcodes.LDC_W;
		case 20:
			return SharedBcOpcodes.LDC2_W;
		case Opcodes.ILOAD:
			return SharedBcOpcodes.ILOAD;
		case Opcodes.LLOAD:
			return SharedBcOpcodes.LLOAD;
		case Opcodes.FLOAD:
			return SharedBcOpcodes.FLOAD;
		case Opcodes.DLOAD:
			return SharedBcOpcodes.DLOAD;
		case Opcodes.ALOAD:
			return SharedBcOpcodes.ALOAD;
		case 26:
			return SharedBcOpcodes.ILOAD_0;
		case 27:
			return SharedBcOpcodes.ILOAD_1;
		case 28:
			return SharedBcOpcodes.ILOAD_2;
		case 29:
			return SharedBcOpcodes.ILOAD_3;
		case 30:
			return SharedBcOpcodes.LLOAD_0;
		case 31:
			return SharedBcOpcodes.LLOAD_1;
		case 32:
			return SharedBcOpcodes.LLOAD_2;
		case 33:
			return SharedBcOpcodes.LLOAD_3;
		case 34:
			return SharedBcOpcodes.FLOAD_0;
		case 35:
			return SharedBcOpcodes.FLOAD_1;
		case 36:
			return SharedBcOpcodes.FLOAD_2;
		case 37:
			return SharedBcOpcodes.FLOAD_3;
		case 38:
			return SharedBcOpcodes.DLOAD_0;
		case 39:
			return SharedBcOpcodes.DLOAD_1;
		case 40:
			return SharedBcOpcodes.DLOAD_2;
		case 41:
			return SharedBcOpcodes.DLOAD_3;
		case 42:
			return SharedBcOpcodes.ALOAD_0;
		case 43:
			return SharedBcOpcodes.ALOAD_1;
		case 44:
			return SharedBcOpcodes.ALOAD_2;
		case 45:
			return SharedBcOpcodes.ALOAD_3;
		case Opcodes.IALOAD:
			return SharedBcOpcodes.IALOAD;
		case Opcodes.LALOAD:
			return SharedBcOpcodes.LALOAD;
		case Opcodes.FALOAD:
			return SharedBcOpcodes.FALOAD;
		case Opcodes.DALOAD:
			return SharedBcOpcodes.DALOAD;
		case Opcodes.AALOAD:
			return SharedBcOpcodes.AALOAD;
		case Opcodes.BALOAD:
			return SharedBcOpcodes.BALOAD;
		case Opcodes.CALOAD:
			return SharedBcOpcodes.CALOAD;
		case Opcodes.SALOAD:
			return SharedBcOpcodes.SALOAD;
		case Opcodes.ISTORE:
			return SharedBcOpcodes.ISTORE;
		case Opcodes.LSTORE:
			return SharedBcOpcodes.LSTORE;
		case Opcodes.FSTORE:
			return SharedBcOpcodes.FSTORE;
		case Opcodes.DSTORE:
			return SharedBcOpcodes.DSTORE;
		case Opcodes.ASTORE:
			return SharedBcOpcodes.ASTORE;
		case 59:
			return SharedBcOpcodes.ISTORE_0;
		case 60:
			return SharedBcOpcodes.ISTORE_1;
		case 61:
			return SharedBcOpcodes.ISTORE_2;
		case 62:
			return SharedBcOpcodes.ISTORE_3;
		case 63:
			return SharedBcOpcodes.LSTORE_0;
		case 64:
			return SharedBcOpcodes.LSTORE_1;
		case 65:
			return SharedBcOpcodes.LSTORE_2;
		case 66:
			return SharedBcOpcodes.LSTORE_3;
		case 67:
			return SharedBcOpcodes.FSTORE_0;
		case 68:
			return SharedBcOpcodes.FSTORE_1;
		case 69:
			return SharedBcOpcodes.FSTORE_2;
		case 70:
			return SharedBcOpcodes.FSTORE_3;
		case 71:
			return SharedBcOpcodes.DSTORE_0;
		case 72:
			return SharedBcOpcodes.DSTORE_1;
		case 73:
			return SharedBcOpcodes.DSTORE_2;
		case 74:
			return SharedBcOpcodes.DSTORE_3;
		case 75:
			return SharedBcOpcodes.ASTORE_0;
		case 76:
			return SharedBcOpcodes.ASTORE_1;
		case 77:
			return SharedBcOpcodes.ASTORE_2;
		case 78:
			return SharedBcOpcodes.ASTORE_3;
		case Opcodes.IASTORE:
			return SharedBcOpcodes.IASTORE;
		case Opcodes.LASTORE:
			return SharedBcOpcodes.LASTORE;
		case Opcodes.FASTORE:
			return SharedBcOpcodes.FASTORE;
		case Opcodes.DASTORE:
			return SharedBcOpcodes.DASTORE;
		case Opcodes.AASTORE:
			return SharedBcOpcodes.AASTORE;
		case Opcodes.BASTORE:
			return SharedBcOpcodes.BASTORE;
		case Opcodes.CASTORE:
			return SharedBcOpcodes.CASTORE;
		case Opcodes.SASTORE:
			return SharedBcOpcodes.SASTORE;
		case Opcodes.POP:
			return SharedBcOpcodes.POP;
		case Opcodes.POP2:
			return SharedBcOpcodes.POP2;
		case Opcodes.DUP:
			return SharedBcOpcodes.DUP;
		case Opcodes.DUP_X1:
			return SharedBcOpcodes.DUP_X1;
		case Opcodes.DUP_X2:
			return SharedBcOpcodes.DUP_X2;
		case Opcodes.DUP2:
			return SharedBcOpcodes.DUP2;
		case Opcodes.DUP2_X1:
			return SharedBcOpcodes.DUP2_X1;
		case Opcodes.DUP2_X2:
			return SharedBcOpcodes.DUP2_X2;
		case Opcodes.SWAP:
			return SharedBcOpcodes.SWAP;
		case Opcodes.IADD:
			return SharedBcOpcodes.IADD;
		case Opcodes.LADD:
			return SharedBcOpcodes.LADD;
		case Opcodes.FADD:
			return SharedBcOpcodes.FADD;
		case Opcodes.DADD:
			return SharedBcOpcodes.DADD;
		case Opcodes.ISUB:
			return SharedBcOpcodes.ISUB;
		case Opcodes.LSUB:
			return SharedBcOpcodes.LSUB;
		case Opcodes.FSUB:
			return SharedBcOpcodes.FSUB;
		case Opcodes.DSUB:
			return SharedBcOpcodes.DSUB;
		case Opcodes.IMUL:
			return SharedBcOpcodes.IMUL;
		case Opcodes.LMUL:
			return SharedBcOpcodes.LMUL;
		case Opcodes.FMUL:
			return SharedBcOpcodes.FMUL;
		case Opcodes.DMUL:
			return SharedBcOpcodes.DMUL;
		case Opcodes.IDIV:
			return SharedBcOpcodes.IDIV;
		case Opcodes.LDIV:
			return SharedBcOpcodes.LDIV;
		case Opcodes.FDIV:
			return SharedBcOpcodes.FDIV;
		case Opcodes.DDIV:
			return SharedBcOpcodes.DDIV;
		case Opcodes.IREM:
			return SharedBcOpcodes.IREM;
		case Opcodes.LREM:
			return SharedBcOpcodes.LREM;
		case Opcodes.FREM:
			return SharedBcOpcodes.FREM;
		case Opcodes.DREM:
			return SharedBcOpcodes.DREM;
		case Opcodes.INEG:
			return SharedBcOpcodes.INEG;
		case Opcodes.LNEG:
			return SharedBcOpcodes.LNEG;
		case Opcodes.FNEG:
			return SharedBcOpcodes.FNEG;
		case Opcodes.DNEG:
			return SharedBcOpcodes.DNEG;
		case Opcodes.ISHL:
			return SharedBcOpcodes.ISHL;
		case Opcodes.LSHL:
			return SharedBcOpcodes.LSHL;
		case Opcodes.ISHR:
			return SharedBcOpcodes.ISHR;
		case Opcodes.LSHR:
			return SharedBcOpcodes.LSHR;
		case Opcodes.IUSHR:
			return SharedBcOpcodes.IUSHR;
		case Opcodes.LUSHR:
			return SharedBcOpcodes.LUSHR;
		case Opcodes.IAND:
			return SharedBcOpcodes.IAND;
		case Opcodes.LAND:
			return SharedBcOpcodes.LAND;
		case Opcodes.IOR:
			return SharedBcOpcodes.IOR;
		case Opcodes.LOR:
			return SharedBcOpcodes.LOR;
		case Opcodes.IXOR:
			return SharedBcOpcodes.IXOR;
		case Opcodes.LXOR:
			return SharedBcOpcodes.LXOR;
		case Opcodes.IINC:
			return SharedBcOpcodes.IINC;
		case Opcodes.I2L:
			return SharedBcOpcodes.I2L;
		case Opcodes.I2F:
			return SharedBcOpcodes.I2F;
		case Opcodes.I2D:
			return SharedBcOpcodes.I2D;
		case Opcodes.L2I:
			return SharedBcOpcodes.L2I;
		case Opcodes.L2F:
			return SharedBcOpcodes.L2F;
		case Opcodes.L2D:
			return SharedBcOpcodes.L2D;
		case Opcodes.F2I:
			return SharedBcOpcodes.F2I;
		case Opcodes.F2L:
			return SharedBcOpcodes.F2L;
		case Opcodes.F2D:
			return SharedBcOpcodes.F2D;
		case Opcodes.D2I:
			return SharedBcOpcodes.D2I;
		case Opcodes.D2L:
			return SharedBcOpcodes.D2L;
		case Opcodes.D2F:
			return SharedBcOpcodes.D2F;
		case Opcodes.I2B:
			return SharedBcOpcodes.I2B;
		case Opcodes.I2C:
			return SharedBcOpcodes.I2C;
		case Opcodes.I2S:
			return SharedBcOpcodes.I2S;
		case Opcodes.LCMP:
			return SharedBcOpcodes.LCMP;
		case Opcodes.FCMPL:
			return SharedBcOpcodes.FCMPL;
		case Opcodes.FCMPG:
			return SharedBcOpcodes.FCMPG;
		case Opcodes.DCMPL:
			return SharedBcOpcodes.DCMPL;
		case Opcodes.DCMPG:
			return SharedBcOpcodes.DCMPG;
		case Opcodes.IFEQ:
			return SharedBcOpcodes.IFEQ;
		case Opcodes.IFNE:
			return SharedBcOpcodes.IFNE;
		case Opcodes.IFLT:
			return SharedBcOpcodes.IFLT;
		case Opcodes.IFGE:
			return SharedBcOpcodes.IFGE;
		case Opcodes.IFGT:
			return SharedBcOpcodes.IFGT;
		case Opcodes.IFLE:
			return SharedBcOpcodes.IFLE;
		case Opcodes.IF_ICMPEQ:
			return SharedBcOpcodes.IF_ICMPEQ;
		case Opcodes.IF_ICMPNE:
			return SharedBcOpcodes.IF_ICMPNE;
		case Opcodes.IF_ICMPLT:
			return SharedBcOpcodes.IF_ICMPLT;
		case Opcodes.IF_ICMPGE:
			return SharedBcOpcodes.IF_ICMPGE;
		case Opcodes.IF_ICMPGT:
			return SharedBcOpcodes.IF_ICMPGT;
		case Opcodes.IF_ICMPLE:
			return SharedBcOpcodes.IF_ICMPLE;
		case Opcodes.IF_ACMPEQ:
			return SharedBcOpcodes.IF_ACMPEQ;
		case Opcodes.IF_ACMPNE:
			return SharedBcOpcodes.IF_ACMPNE;
		case Opcodes.GOTO:
			return SharedBcOpcodes.GOTO;
		case Opcodes.JSR:
			return SharedBcOpcodes.JSR;
		case Opcodes.RET:
			return SharedBcOpcodes.RET;
		case Opcodes.TABLESWITCH:
			return SharedBcOpcodes.TABLESWITCH;
		case Opcodes.LOOKUPSWITCH:
			return SharedBcOpcodes.LOOKUPSWITCH;
		case Opcodes.IRETURN:
			return SharedBcOpcodes.IRETURN;
		case Opcodes.LRETURN:
			return SharedBcOpcodes.LRETURN;
		case Opcodes.FRETURN:
			return SharedBcOpcodes.FRETURN;
		case Opcodes.DRETURN:
			return SharedBcOpcodes.DRETURN;
		case Opcodes.ARETURN:
			return SharedBcOpcodes.ARETURN;
		case Opcodes.RETURN:
			return SharedBcOpcodes.RETURN;
		case Opcodes.GETSTATIC:
			return SharedBcOpcodes.GETSTATIC;
		case Opcodes.PUTSTATIC:
			return SharedBcOpcodes.PUTSTATIC;
		case Opcodes.GETFIELD:
			return SharedBcOpcodes.GETFIELD;
		case Opcodes.PUTFIELD:
			return SharedBcOpcodes.PUTFIELD;
		case Opcodes.INVOKEVIRTUAL:
			return SharedBcOpcodes.INVOKEVIRTUAL;
		case Opcodes.INVOKESPECIAL:
			return SharedBcOpcodes.INVOKESPECIAL;
		case Opcodes.INVOKESTATIC:
			return SharedBcOpcodes.INVOKESTATIC;
		case Opcodes.INVOKEINTERFACE:
			return SharedBcOpcodes.INVOKEINTERFACE;
		case Opcodes.INVOKEDYNAMIC:
			return SharedBcOpcodes.INVOKEDYNAMIC;
		case Opcodes.NEW:
			return SharedBcOpcodes.NEW;
		case Opcodes.NEWARRAY:
			return SharedBcOpcodes.NEWARRAY;
		case Opcodes.ANEWARRAY:
			return SharedBcOpcodes.ANEWARRAY;
		case Opcodes.ARRAYLENGTH:
			return SharedBcOpcodes.ARRAYLENGTH;
		case Opcodes.ATHROW:
			return SharedBcOpcodes.ATHROW;
		case Opcodes.CHECKCAST:
			return SharedBcOpcodes.CHECKCAST;
		case Opcodes.INSTANCEOF:
			return SharedBcOpcodes.INSTANCEOF;
		case Opcodes.MONITORENTER:
			return SharedBcOpcodes.MONITORENTER;
		case Opcodes.MONITOREXIT:
			return SharedBcOpcodes.MONITOREXIT;
		case 196:
			return SharedBcOpcodes.WIDE;
		case Opcodes.MULTIANEWARRAY:
			return SharedBcOpcodes.MULTIANEWARRAY;
		case Opcodes.IFNULL:
			return SharedBcOpcodes.IFNULL;
		case Opcodes.IFNONNULL:
			return SharedBcOpcodes.IFNONNULL;
		default:
			throw new UnsupportedOperationException("Unknown opcode!");
		}
	}

	@Override
	public int getInstructionType() {
		switch (asmNode.getType()) {
		case AbstractInsnNode.INSN:
			return SharedBcInstructions.NOP;
		case AbstractInsnNode.INT_INSN:
			return SharedBcInstructions.INT;
		case AbstractInsnNode.VAR_INSN:
			return SharedBcInstructions.LOCAL_VARIABLE;
		case AbstractInsnNode.TYPE_INSN:
			return SharedBcInstructions.TYPE;
		case AbstractInsnNode.FIELD_INSN:
			return SharedBcInstructions.FIELD;
		case AbstractInsnNode.METHOD_INSN:
			return SharedBcInstructions.INVOKE_METHOD;
		case AbstractInsnNode.INVOKE_DYNAMIC_INSN:
			return SharedBcInstructions.INVOKE_DYNAMIC;
		case AbstractInsnNode.JUMP_INSN:
			return SharedBcInstructions.JUMP;
		case AbstractInsnNode.LABEL:
			return SharedBcInstructions.LABEL;
		case AbstractInsnNode.LDC_INSN:
			return SharedBcInstructions.LOAD_CONSTANT;
		case AbstractInsnNode.IINC_INSN:
			return SharedBcInstructions.INCREMENT_INTEGER;
		case AbstractInsnNode.TABLESWITCH_INSN:
			return SharedBcInstructions.TABLESWITCH;
		case AbstractInsnNode.LOOKUPSWITCH_INSN:
			return SharedBcInstructions.LOOKUPSWITCH;
		case AbstractInsnNode.MULTIANEWARRAY_INSN:
			return SharedBcInstructions.MULTIANEWARRAY;
		case AbstractInsnNode.FRAME:
			return SharedBcInstructions.FRAME;
		case AbstractInsnNode.LINE:
			return SharedBcInstructions.LINE;
		default:
			throw new UnsupportedOperationException("Unknown instruction type!");
		}
	}

	private AbstractInsnNode asmNode;
}
